// Copyright 2021 Orange SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.package apis

package main

import (
	"fmt"

	oktres "github.com/Orange-OpenSource/Operators-Karma-Tools/resources"
)

const resourceStub = `
package controllers

/**
*** THIS FILE IS AUTO-GENERATED BY THE OKT RESOURCE GENERATOR (CLI TOOL)
*** It can be modified if needed for specific needs
*** Note that any ResourceMutator of this kind managed by your own controller depends on this Resource Stub!
**/

// {{.resTypeDescription}}

import (
	oktres "github.com/Orange-OpenSource/Operators-Karma-Tools/resources"
	okthelpers "github.com/Orange-OpenSource/Operators-Karma-Tools/resources/k8s"

	k8sres "k8s.io/api/{{ .resVersion }}"
	"k8s.io/apimachinery/pkg/runtime"

	k8sclient "sigs.k8s.io/controller-runtime/pkg/client"
)

// {{ .resType }}ResourceStub an OKT extended {{ .resKind }} resource
type {{ .resType }}ResourceStub struct {
	Expected k8sres.{{ .resKind }}
	okthelpers.MutableResourceObject // OKT K8S resource
	oktres.MutationHelper
}

// blank assignment to verify that ReconcileCockroachDB implements reconcile.Reconciler
var _ oktres.MutableResource = &{{ .resType }}ResourceStub{}

// GetResourceObject Implement a Stub interface function to get the Mutable Object
func (r *{{ .resType }}ResourceStub) GetResourceObject() *okthelpers.ResourceObject {
	return &r.ResourceObject
}

// GetExpected Implements a Stub interface function to get the Expected object
func (r *{{ .resType }}ResourceStub) GetExpected() *k8sres.{{ .resKind }} {
	return &r.Expected
}


// Init Initialize OKT resource with K8S runtime object in the same Namespace of the Custom Resource
func (r *{{ .resType }}ResourceStub) Init(client k8sclient.Client, namespace, name string) error {
	r.Expected.APIVersion = "{{ .resVersion }}"
	r.Expected.Kind = "{{ .resKind }}"
	r.MutationHelper = &okthelpers.{{ .oktMutationHelper }}{ Expected: &r.Expected }

	return r.MutableResourceObject.Init(client, &r.Expected, namespace, name)
}

// PreMutate xx
func (r *{{ .resType }}ResourceStub) PreMutate(scheme *runtime.Scheme) error {
	if err := r.MutationHelper.PreMutate(); err != nil {
		return err
	}
	return nil
}

// PostMutate xx
func (r *{{ .resType }}ResourceStub) PostMutate(cr k8sclient.Object, scheme *runtime.Scheme) error {
	if scheme != nil {
		if err := r.SetOwnerReference(cr, scheme); err != nil {
			return err
		}
	}
	if err := r.MutationHelper.PostMutate(); err != nil {
		return err
	}
	return nil
}

// GetHashableRefHelper provide an helper for the HashableRef interface
// This will help to defines which object(s) data has to be used to detect modifications thanks to the Hash computation
// The AddSpec() method of this helper adds the whole "Spec" object in the hashable Ref.
// The Spec can be something else than the typical K8S Spec resource part when it does not exist in the K8S API definition 
// It can be defined by the MutationHelper for this resource, eventualy in accordance with Pre/PostMutate() methods provided with the helper. 
func (r *{{ .resType }}ResourceStub) GetHashableRefHelper() *okthelpers.HashableRefHelper {
	hr := &okthelpers.HashableRefHelper{}
	hr.Init(r.MutationHelper)

	return hr
}

{{ if .oktResHelper }}
func (r *{{ .resType }}ResourceStub) getHelper() *okthelpers.{{ .oktResHelper }} {
	helper := okthelpers.{{ .oktResHelper }}{}
	helper.{{ .resKind }}Stub = r
	return &helper
}
{{ end }}
`

// getResourceStubData Generates a resource stub from a template and values
// Example for a StatefulSet in v1 resource type:
//  - resKind is "StatefulSet"
//  - resAPIVersion is "apps/v1" the path complement after "k8s.io/api/" API path to import
//  - oktResHelper is "StatefulSetHelper" (a helper in resources/k8s module) or "// No helper for this resource" (a GO comment)
//  - oktMutationHelper is set to DefaultMutationHelper (no Pre/Post Mutation, Spec part has to be defined by user)
func getResourceStubData(resType string, res *resourceEntry) (string, error) {
	mutationHelper := "DefaultMutationHelper"
	if res.mutationHelper != "" {
		mutationHelper = res.mutationHelper
	}
	values := map[string]string{
		"resTypeDescription": fmt.Sprintf("Resource type %s: %v", resType, res),
		"resType":            resType,
		"resKind":            res.kind,
		"resVersion":         res.apiVersion,
		"oktResHelper":       res.helper,
		"oktMutationHelper":  mutationHelper,
		"comment":            res.comment,
	}

	var bOut []byte
	var err error

	if bOut, err = oktres.TplToBytes(resourceStub, values); err != nil {
		return "", err
	}

	return string(bOut), nil
}
