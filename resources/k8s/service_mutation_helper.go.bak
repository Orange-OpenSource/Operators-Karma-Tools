package k8s

import (
	oktres "gitlab.tech.orange/dbmsprivate/operators/okt/resources"

	v1 "k8s.io/api/core/v1"
	//"k8s.io/apimachinery/pkg/runtime"
	//"k8s.io/client-go/kubernetes/scheme"
)

// ServiceMutationHelper provides specific pre and post mutation operations on a Service object.
// Important, suppose that hash computation is done on Service's "Data" field.
// However "StringData" can be used as usual to store string information.
type ServiceMutationHelper struct {
	Expected *v1.Service
}

// blank assignment to verify that ReconcileCockroachDB implements reconcile.Reconciler
var _ oktres.MutationHelper = &ServiceMutationHelper{}

// GetSpec provide a virtual Spec for this object that can be used to compute hashable Ref.
// Pre/PostMutate() methods, here, are built in respect to this choice
func (r *ServiceMutationHelper) GetSpec() interface{} {
	return r.Expected.Spec
}

// PreMutate xx
func (r *ServiceMutationHelper) PreMutate() error {
	//obj := r.GetExpected()
	//if !r.IsObjectCreation() {
	//r.ip := obj.Spec.ClusterIP
	//}
	return nil
}

// PostMutate xx
func (r *ServiceMutationHelper) PostMutate() error {
	// Restore ClusterIP on Update

	return nil
}
